name: Build FAP (no Docker)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo (app sources)
        uses: actions/checkout@v4

      - name: Checkout Flipper firmware
        uses: actions/checkout@v4
        with:
          repository: flipperdevices/flipperzero-firmware
          path: firmware
          submodules: recursive
          fetch-depth: 0

      - name: Place app into applications_user
        run: |
          mkdir -p firmware/applications_user/nfc_compare
          cp application.fam nfc_compare.c nfc_compare_io.c nfc_compare_io.h firmware/applications_user/nfc_compare/

      # Installe les dépendances minimales pour fbt et la toolchain ARM
      - name: Setup toolchain and deps
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake ninja-build python3-pip python3-venv \
              gcc-arm-none-eabi binutils-arm-none-eabi
          python3 -m pip install --upgrade pip
          # Certaines versions de fbt utilisent des scripts python; on s'assure que 'invoke' est présent
          python3 -m pip install invoke

      - name: Build FAP (native)
        working-directory: firmware
        run: |
          ./fbt --version || true
          ./fbt fap_nfc_compare

      - name: Find artifact
        id: find
        run: |
          set -e
          echo "Listing build tree for debug:"
          find firmware/build -maxdepth 7 -type f -iname "*.fap" -print || true
          path=$(find firmware/build -type f \
            -iname "*NFC*Compare*.fap" \
            -o -iname "NFC_Compare.fap" \
            -o -iname "*nfc*compare*.fap" \
            | head -n1)
          if [ -z "$path" ]; then
            echo "No .fap found"; exit 1
          fi
          echo "artifact=$path" >> $GITHUB_OUTPUT
          echo "Found artifact: $path"

      - name: Upload artifact to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          files: ${{ steps.find.outputs.artifact }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
